<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="javadoc" deleted="false" description="copyright for JavaDoc" enabled="true" name="copyjdoc"> &lt;br&gt;&lt;br&gt;&#13;
 * &lt;center&gt;&#13;
 * &lt;a href="http://www.srussell.net"&gt; Copyright &amp;copy; Scott M. Russell, 2016&lt;/a&gt;&#13;
 * &lt;/center&gt;</template><template autoinsert="true" context="java" deleted="false" description="my copyright" enabled="true" name="copyright">/**&#13;
 * http://dtownsmr.github.io&#13;
 *&#13;
 * (c) Copyright  Scott M. Russell.  2016, All rights reserved.&#13;
 */&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Java body of a Singleton wrapper class" enabled="true" name="singletonwrapper">/**&#13;
 * A static container for a single instance of ${enclosing_type}&#13;
 */&#13;
final public class ${enclosing_type}Wrapper&#13;
{&#13;
&#13;
    /**&#13;
     * A reference to a possibly alternate factory.&#13;
     */&#13;
&#13;
    static private SingletonFactoryFunctor factory = null;&#13;
&#13;
    /**&#13;
     * A reference to the current instance.&#13;
     */&#13;
    static private ${enclosing_type} instance = null;&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * This is the default factory method.&#13;
     * It is called to create a new ${enclosing_type} when&#13;
     * a new instance is needed and _factory is null.&#13;
     */&#13;
    static private ${enclosing_type} makeInstance()&#13;
    {&#13;
        return new ${enclosing_type}();&#13;
    }&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * This is the accessor for the ${enclosing_type}.&#13;
     */&#13;
    static public synchronized ${enclosing_type} instance()&#13;
    {&#13;
        if ( null == instance )&#13;
        {&#13;
            instance = ( null == factory ) ? makeInstance() : (${enclosing_type})factory.makeInstance();&#13;
        }&#13;
        return instance;&#13;
    }&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * Sets the factory method used to create new instances.&#13;
     * You can set the factory method to null to use the default method.&#13;
     * @param factory SingletonFactoryFunctor - The ${enclosing_type} factory&#13;
     */&#13;
    static public synchronized void setFactory( SingletonFactoryFunctor newFactory )&#13;
    {&#13;
        factory = newFactory;&#13;
    }&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * Sets the current ${enclosing_type} instance.&#13;
     * You can set this to null to force a new instance to be created the&#13;
     * next time instance() is called.&#13;
     * @param instance ${enclosing_type} - The ${enclosing_type} instance to use.&#13;
     */&#13;
    static public synchronized void setInstance( ${enclosing_type} newInstance )&#13;
    {&#13;
        instance = newInstance;&#13;
    }&#13;
&#13;
}</template></templates>
